# auto-generated by grc.converter

id: fsk_burst_extractor_hier
label: Burst Extractor Hier
category: '[Sandia]/FHSS Utilities'

parameters:
-   id: samp_rate
    label: Sample Rate [Hz]
    dtype: float
    default: samp_rate
    hide: none
-   id: center_freq
    label: Center Frequency [Hz]
    dtype: float
    default: center_freq
    hide: none
-   id: fft_size
    label: FFT Size
    dtype: int
    default: '256'
    hide: none

-   id: threshold
    label: Threshold [dB]
    category: Burst Bounds
    dtype: real
    default: '6'
    hide: none
-   id: burst_width
    label: Burst Width [Hz]
    category: Burst Bounds
    dtype: int
    default: int(500e3)
    hide: part
-   id: hist_time
    label: History Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.004'
    hide: part
-   id: lookahead_time
    label: Lookahead Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.0005'
    hide: part
-   id: max_burst_time
    label: Max Burst Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.5'
    hide: part
-   id: min_burst_time
    label: Min Burst Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.001'
    hide: part
-   id: pre_burst_time
    label: Pre Burst Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.00008'
    hide: part
-   id: post_burst_time
    label: Post Burst Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.00008'
    hide: part

-   id: decimation
    label: Decimation
    category: Filter/Decimate
    dtype: int
    default: '20'
    hide: none
-   id: n_threads
    label: N Threads Downmix
    category: Filter/Decimate
    dtype: int
    default: '3'
    hide: part
-   id: output_cutoff
    label: Cutoff [cycles/samp]
    category: Filter/Decimate
    dtype: real
    default: '0.25'
    hide: part
-   id: output_trans_width
    label: Trans Width [cycles/samp]
    category: Filter/Decimate
    dtype: real
    default: '0.1'
    hide: part
-   id: output_attenuation
    label: Output Attenuation
    category: Filter/Decimate
    dtype: real
    default: '40'
    hide: part

-   id: cf_method
    label: Method
    category: Freq. Est.
    dtype: enum
    default: fhss_utils.RMS
    options: [fhss_utils.RMS, fhss_utils.HALF_POWER, fhss_utils.COERCE, fhss_utils.MIDDLE_OUT]
    option_labels: [RMS, Half-Power, Coerce Only, Middle Out]
    hide: part
-   id: channel_freqs
    label: Channel Center Freqs
    category: Freq. Est.
    dtype: real_vector
    default: '[]'
    hide: part

-   id: snr_min
    label: Minimum SNR
    category: Freq. Est.
    dtype: float
    default: 10.0
    hide: ${ ('none' if (cf_method == "fhss_utils.MIDDLE_OUT") else 'all') }
-   id: thresh_min
    label: Min Threshold Rel. Peak
    category: Freq. Est.
    dtype: float
    default: -25.0
    hide: ${ ('part' if (cf_method == "fhss_utils.MIDDLE_OUT") else 'all') }


inputs:
-   domain: stream
    dtype: complex
    vlen: 1

outputs:
-   domain: message
    id: pdu_out

asserts:
- ${ decimation % 2 == 0 }

templates:
    imports: from gnuradio import fhss_utils
    make: |-
        fhss_utils.fsk_burst_extractor_hier(
            burst_width=${burst_width},
            center_freq=${center_freq},
            decimation=${decimation},
            fft_size=${fft_size},
            hist_time=${hist_time},
            lookahead_time=${lookahead_time},
            max_burst_time=${max_burst_time},
            min_burst_time=${min_burst_time},
            output_attenuation=${output_attenuation},
            output_cutoff=${output_cutoff},
            output_trans_width=${output_trans_width},
            post_burst_time=${post_burst_time},
            pre_burst_time=${pre_burst_time},
            samp_rate=int(${samp_rate}),
            threshold=${threshold},
            cf_method=${cf_method},
            channel_freqs=${channel_freqs},
            n_threads=${n_threads}
        )
        % if cf_method == "fhss_utils.MIDDLE_OUT":
        self.${id}.cf_estimate.set_snr_min(${snr_min})
        self.${id}.cf_estimate.set_thresh_min(${thresh_min})
        % endif
    callbacks:
    - set_channel_freqs(${channel_freqs})
    - set_cf_method(${cf_method})
    - set_snr_min(${snr_min})
    - set_thresh_min(${thresh_min})
    - set_threshold(${threshold})

file_format: 1
